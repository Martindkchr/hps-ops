---
- name: remove ppa
  apt_repository:
    repo: ppa:graphics-drivers/ppa
    state: absent

- name: remove old signing key
  apt_key:
    id: "{{ old_nvidia_driver_ubuntu_cuda_repo_gpgkey_id }}"
    state: absent
  environment: "{{proxy_env if proxy_env is defined else {}}}"
  when: nvidia_driver_add_repos | bool

- name: add CUDA keyring
  apt:
    deb: "{{ nvidia_driver_ubuntu_cuda_keyring_url }}"
    state: "present"
  environment: "{{proxy_env if proxy_env is defined else {}}}"
  when: nvidia_driver_add_repos | bool

## 修改为国内源
- name: Replace string in file
  replace:
    path: /etc/apt/sources.list.d/cuda-ubuntu2004-x86_64.list  # 指定需要替换的文件路径
    regexp: 'developer.download.nvidia.com'  # 指定需要被替换的字符串
    replace: 'developer.download.nvidia.cn'  # 指定新字符串
  ignore_errors: yes

## 设置非图形模式
- name: set init 3
  command: init 3
  ignore_errors: yes

- name: set default target to multi-user
  command: systemctl set-default multi-user.target
  ignore_errors: yes

- name: force an apt update
  apt:
    update_cache: true
  changed_when: false

- name: ensure kmod is installed
  apt:
    name: "kmod"
    state: "present"

- name: blacklist nouveau
  kernel_blacklist:
    name: nouveau
    state: present

#- name: install driver packages
#  apt:
#    name: "{{ nvidia_driver_package_version | ternary(nvidia_driver_ubuntu_cuda_package+'='+nvidia_driver_package_version, nvidia_driver_ubuntu_cuda_package) }}"
#    state: "{{ nvidia_driver_package_state }}"
#    autoremove: "{{ nvidia_driver_package_state == 'absent' }}"
#    purge: "{{ nvidia_driver_package_state == 'absent' }}"
#  register: install_driver
#  environment: "{{proxy_env if proxy_env is defined else {}}}"

- name: install driver packages
  apt:
    name: "{{ nvidia_driver_package_version | ternary(item+'='+nvidia_driver_package_version, item) }}"
    state: "{{ nvidia_driver_package_state }}"
    autoremove: "{{ nvidia_driver_package_state == 'absent' }}"
    purge: "{{ nvidia_driver_package_state == 'absent' }}"
  loop: "{{ nvidia_driver_ubuntu_packages }}"
  register: install_driver
  environment: "{{proxy_env if proxy_env is defined else {}}}"

- name: Start the nvidia-fabricmanager service otherwise
  systemd:
    daemon_reload: yes
    name: "nvidia-fabricmanager.service"
    state: "started"
    enabled: true